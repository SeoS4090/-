
		//////데이터 전송량 갱신
		//if (ptr->recvbytes == 0) {
		//	ptr->recvbytes = cbTransferred;
		//	ptr->sendbytes = 0;
		//	ptr->buf[ptr->recvbytes] = '\0';
		//}
		//else {
		//	ptr->sendbytes += cbTransferred;
		//}
		//memcpy(&ptr->buf[0], &ptr->buf[ptr->recvbytes], sizeof(ptr->buf));

		//if (ptr->recvbytes > ptr->sendbytes) {
		//	//데이터 보내기
		//	ZeroMemory(&ptr->overlapped, sizeof(ptr->overlapped));
		//	ptr->wsabuf.buf = ptr->buf + ptr->sendbytes;
		//	ptr->wsabuf.len = ptr->recvbytes - ptr->sendbytes;

		//	DWORD sendbytes;

		//	retval = WSASend(ptr->sock, &ptr->wsabuf, 1, &sendbytes, 0, &ptr->overlapped, NULL);
		//	if (retval == SOCKET_ERROR) {
		//		if (WSAGetLastError() != WSA_IO_PENDING) {
		//			//err_display("WSASend()");
		//		}
		//		continue;
		//	}
		//}
		//else {
		//	ptr->recvbytes = 0;

		//	//데이터 받기
		//	ZeroMemory(&ptr->overlapped, sizeof(ptr->overlapped));
		//	ptr->wsabuf.buf = ptr->buf;
		//	ptr->wsabuf.len = BUFSIZE;

		//	DWORD recvbytes;
		//	DWORD flags = 0;
		//	retval = WSARecv(ptr->sock, &ptr->wsabuf, 1, &recvbytes, &flags, &ptr->overlapped, NULL);
		//	if (retval == SOCKET_ERROR) {
		//		if (WSAGetLastError() != WSA_IO_PENDING) {
		//			//err_display("WSASend()");
		//		}
		//		continue;
		//	}
		//}